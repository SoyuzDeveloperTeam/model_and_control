//-------------------------------------------------------------------------------
// ZNut.h
//---------------------------------------------------------------------------
// НУТАЦИЯ
//---------------------------------------------------------------------------
// Вычисление параметров нутации и матрицы нутации
// Реализованы методы расчёта в зависимости от значения ModNut:
//	NUT1980			// Локальная реализация вычислния нутации 
//					// по рекомендациям IAU 1980 года, тот же алгоритм 
//					// изложен в РД-50...
//	NUT2000			// Локальная реализация вычислния нутации с учётом 
//					// рекомендвций IAU 2000 года относительно расчёта 
//					// фундаментальных аргументов
//	NUT2006			// Локальная реализация модели IAU2000A
//	NUTIAU1980		// Реализация SOFA модели IAU 1980 года
//	NUTIAU2000B		// Реализация SOFA упрощённой модели IAU2000B
//	NUTIAU2000A		// Реализация SOFA полной модели IAU2000A
//	NUTIAU2006		// Реализация SOFA модели Convention 2006
//
// Необхродимо помнить, что для расчёта матрицы нутации необходимо значение
// среднего наклона эклиптики к экваору которвый так же может быть расчитан
// с использованием той или иной полиномиальной модели, которая в рамках 
// данного программного модуля выбирается в соответствии со значением
// ModNut 
//
// А. Николенко 26.02.2019
//-------------------------------------------------------------------------------
#ifndef _ZNUT_H
#define _ZNUT_H

enum MODEL_NUTJ2000 {
	NUT1980=0,			// Локальная реализация вычислния нутации 
						// по рекомендациям IAU 1980 года, тот же алгоритм 
						// изложен в РД-50...
	NUT2000=1,			// Локальная реализация вычислния нутации с учётом 
						// рекомендвций IAU 2000 года относительно расчёта 
						// фундаментальных аргументов
	NUT2006=2,			// Локальная реализация модели IAU2000A
	NUTIAU1980=3,		// Реализация SOFA модели IAU 1980 года
	NUTIAU2000B=4,		// Реализация SOFA упрощённой модели IAU2000B
	NUTIAU2000A=5,		// Реализация SOFA полной модели IAU2000A
	NUTIAU2006=6 } ;	// Реализация SOFA модели Convention 2006

// Принятая по умолчанию модель эволюции параметров нутации (нутация в 
// долготе и нутация в наклоне)
#define DEF_MODNUT NUTIAU2000B

//----------------------------------------------------------------------------
// Расчет матрицы M размера 3*3 на время t от эпохи J2000
// Scale - масштаб времени
//		TIME2000ASD	= 0, в ссс от 2000 (0h 01.01.2000),
//		IME1975ASD	= 1, в ссс от 1975 (0h 01.01.1975),
//		TIMEJ2000JC	= 2. в юлианских столетиях от J2000 (12h 01.01.2000).
//
// В прикладных задачах необходимо вызывать метод расчёта матрицы нутации
// следующим образом
//		double M[9] ;
//		ZBuildMatrNutJ2000(t, M) ;
// Где t время в ССС. Остальные параметры будут инициализированными значениями 
// по умолчанию, что обеспечит единообразный расчёт во всех прикладных задачах.
//----------------------------------------------------------------------------
FLYCORE_API int ZBuildMatrNutJ2000(double t, double* M,
								   TIMESCALE Scale=DEFTIME_SCALE, 
								   MODEL_NUTJ2000 ModNut=DEF_MODNUT) ;

//----------------------------------------------------------------------------
// Расчет параметров нутации на время t от эпохи J2000
// dimKey - признак размерности результатов
//		0 - в рарианах,
//		1 - в градусах,
//		2 - в угловых секундах.
// Scale - масштаб времени
//		TIME2000ASD	= 0, в ссс от 2000 (0h 01.01.2000),
//		IME1975ASD	= 1, в ссс от 1975 (0h 01.01.1975),
//		TIMEJ2000JC	= 2. в юлианских столетиях от J2000 (12h 01.01.2000).
// Nut - параметры нутации
//		Nut[0]	- средний наклон эклиптики к экватору
//		Nut[1]	- нутация в долготе
//		Nut[2]	- нутация в наклоне
//
// В прикладных задачах необходимо вызывать метод расчёта параметров нутации
// следующим образом
//		double Nut[3] ;
//		ZNutJ2000(t, Nut) ;
// Где t время в ССС. Остальные параметры будут инициализированными значениями 
// по умолчанию, что обеспечит единообразный расчёт во всех прикладных задачах.
//----------------------------------------------------------------------------
FLYCORE_API int ZNutJ2000(double t, double *Nut, char dimKey = 0,
						  TIMESCALE Scale=DEFTIME_SCALE, 
						  MODEL_NUTJ2000 ModNut=DEF_MODNUT) ;

//----------------------------------------------------------------------------
// Матрица нутации M по расчитанным ранее параметрам нутации Nut
FLYCORE_API void ZMatrNut(double* Nut, double* M);

//----------------------------------------------------------------------------
// Расчет фундаментальных аргументов 
// u - результат-вектор из 5-ти аргументов: 
//		l	  - Средняя аномалия Луны
//		l'	  - Средняя аномалия Солнца
//		F	  - L-Omega
//		D	  - Средняя элонгация (разность средних долгот) Луны и Солнца
//		Omega - Средняя долгота восходящего узла орбиты Луны на эклиптике
// FlagCalc - флаг расчёта 
//		0 - 5 параметров(по умолчанию),
//		1 - 5,GMST+PI, 
//		2 - 5,Planet
//----------------------------------------------------------------------------
// Вычисление по модели рекомендованной IAU в 1980 году
FLYCORE_API void ZFArgNutRD50(double t, double *u, char FlagCalc,
							  TIMESCALE Scale=DEFTIME_SCALE) ;

// Вычисление по модели рекомендованной IAU в 2000 году (Convention IERS 2003)
FLYCORE_API void ZFArgNutIERS2000(double t, double *u, char FlagCalc,
								  TIMESCALE Scale=DEFTIME_SCALE) ;

//-------------------------------------------------------------------------------
#endif _ZNUT_H
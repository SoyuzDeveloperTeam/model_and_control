//-----------------------------------------------------------------------
// LeapSeconds.h
// А. Николенко 11.06.2019
//-----------------------------------------------------------------------
#ifndef LEAP_SECONDS_H
#define LEAP_SECONDS_H

//-----------------------------------------------------------------------
// Описание элемента списка поправок времени для использования
//-----------------------------------------------------------------------
struct ZSUtcIatItem {
	// Дата поправки в ССС
	double IatTime;
	// Значение поправки в ССС
	double dUtcIat;

	ZSUtcIatItem() { Clear(); }
	void Clear() { IatTime = dUtcIat = 0.; }
};

typedef vector<ZSUtcIatItem> VUtcIatItems;

//-----------------------------------------------------------------------
// Описание списка поправок времени
//-----------------------------------------------------------------------
struct ZSLeapSeconds {
	bool isInit ;			// Флаг инициализации списка поправок
	VUtcIatItems IatList;	// Список поправок
	ZSUtcIatItem Cur, Next; // Оперативные поправоки

	ZSLeapSeconds()  { Clear(); }
	~ZSLeapSeconds() { Clear(); }
	void Clear() { isInit = false; IatList.clear(); }
};

//---------------------------------------------------------------------------
// Инициализация массива секунд координации
// forSureLoad - признак принудительной загрузки (true)
//				 если false то при загруженой ранее информации перезагрузка
//				 не выполняется
//		Пример формата файла с массивом секунд координации
//		3653.0 - 23.0
//		4748.0 - 24.0
//		5479.0 - 25.0
//		5844.0 - 26.0
//		6391.0 - 27.0
//		6756.0 - 28.0
//		7121.0 - 29.0
//		7670.0 - 30.0
//		8217.0 - 31.0
//		8766.0 - 32.0
//		11323.0 - 33.0
//		12419.0 - 34.0
//		13696.0 - 35.0
//		14791.0 - 36.0
//		14975.0 - 37.0
//
//		Задаётся время скачка секунды координации в ссс от 1975 года и
//		значение самой секунды координации
FLYTIME_API int     LeapSecondsInit(bool forSureLoad=true);

//---------------------------------------------------------------------------
// Определение величины скачка секнд координации на заданный момент IAT
// атомного времени - dTime, заданного в ссс (пока отсчитываемого от 1975 года)
FLYTIME_API double  GetLeapSeconds (double dTime);

// Определение каталога файла с массивовм секунд координации
FLYTIME_API void    SetLeapSecondsPath  (const char* path);
// Определение имени файла с массивовм секунд координации
FLYTIME_API void    SetLeapSecondsSource(const char* source);
// Текущие имя каталога и файла с данными о скачках секунды координации
FLYTIME_API char*   GetLeapSecondsPath  ();
FLYTIME_API char*   GetLeapSecondsSource();

#endif //#ifndef LEAP_SECONDS_H